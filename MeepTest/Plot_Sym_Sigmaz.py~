import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


def load(name, onlyFirst=False):

    f = open(name, 'r')
    b = []
    for line in f:
        t = line.split(',')
        temp = []
        for i in t:
            temp.append(float(i))
        if onlyFirst:
            if len(t) < 5:
                temp.append(-1)
            temp = temp[:5]
            #print t
            #print len(t)
        b.append(temp)

    b = np.array(b)
    return b

def drawEllipse(x0,y0, cx, cy, size):

    Cx = cx
    Cy = cy

    angle = np.arange(0, 2*np.pi, 1.0/20)
    x = np.real(np.exp(1j*angle) * cx)
    y = np.real(np.exp(1j*angle) * cy)
    maxsize = np.sqrt(np.max( x**2 + y**2))
  
    x *= size/maxsize
    y *= size/maxsize
    
    x += x0
    y += y0

    #print x
    #print y

    plt.plot(x,y, "w-")


# 3c h1.4 DATA
#hf = load('Q_fcen0.80_df0.40_h1.40_Eztrue_freqs.out', True) # TM Modes
#hfi = load('Q_fcen0.80_df0.40_h1.40_Eztrue_freqsI.out', True) # TM Modes

hf = load('Q_fcen0.80_df0.20_h1.50_Eztrue_freqs.out', True) # TM Modes
hfi = load('Q_fcen0.80_df0.20_h1.50_Eztrue_freqsI.out', True) # TM Modes

#hf = load('3c_TE_h1.1_freq.out', True) # TM Modes
#hfi = load('3c_TE_h1.1_freqI.out', True) # TM Modes

#plt.axhline(0.7)
#plt.axhspan(0.7 - 0.3, 0.7 + 0.3, alpha = 0.3)

# for i in range(len(ef)):
#     x = np.ones(np.shape(hf[i][4:])) * hf[i][1]
#     plt.errorbar(x, hf[i][4:], fmt='bo')

#     x = np.ones(np.shape(ef[i][4:])) * ef[i][1]
#     plt.errorbar(x, ef[i][4:], fmt='ro')

# x = [0,0.5]
# plt.plot(x,x, 'k--')

# plt.show()



# for i in range(len(ef)):
#     x = np.ones(np.shape(hf[i][4:])) * hf[i][1]
#     plt.errorbar(x, hf[i][4:]/(-2*hfi[i][4:]), fmt='bo')

#     x = np.ones(np.shape(ef[i][4:])) * ef[i][1]
#     plt.errorbar(x, ef[i][4:]/(-2*efi[i][4:]), fmt='ro')

# plt.yscale('log')
# plt.show()
#print hf
Qh = hf[:,4]/(-2 * hfi[:,4])
#print Qh
#Qe = ef[:,4]/(-2 * efi[:,4])
X = hf[:,1]
Y = hf[:,2]


fig = plt.subplots( figsize=(5,10))

Qh = np.rot90(np.resize(Qh, ( np.size(np.unique(X)), np.size(np.unique(Y)))))
#print np.shape(Qh)
print Qh
E = np.rot90(np.resize(hf[:,4], ( np.size(np.unique(X)), np.size(np.unique(Y)))))
Y = np.rot90(np.resize(Y, ( np.size(np.unique(X)), np.size(np.unique(Y)))))
X = np.rot90(np.resize(X, ( np.size(np.unique(X)), np.size(np.unique(Y)))))
Data = np.log10(np.abs(Qh))
#Data = Qh

plt.imshow(Data, extent=[np.min(X),np.max(X),np.min(Y),np.max(Y)], interpolation = 'none')
plt.colorbar( label='$\log_{10}(Q)$')

# File containing the polarizations, kx, ky, cx, cy
pol = np.loadtxt('pol_fcen0.80_df0.20_h1.50_Eztrue.out', delimiter =' ', dtype=complex)
for i in range(len(pol[:,0])):
    drawEllipse(pol[i,0],pol[i,1], pol[i,2], pol[i,3], 0.002)

plt.xlim([np.min(X),np.max(X)])
plt.ylim([np.min(Y),np.max(Y)])

#plt.xlim([0.03, 0.06])
#plt.ylim([-0.03, 0.03])

plt.ylabel('$k_y$')
plt.xlabel('$k_x$')


plt.savefig('h1.5.eps')
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.plot_wireframe(X,Y,E)

plt.show()



